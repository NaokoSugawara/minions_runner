/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval("__webpack_require__(/*! ./index.scss */ \"./src/index.scss\");\n// import { init, Sprite, SpriteSheet, GameLoop } from 'kontra';\n\n// import MinionRunner from './game';\n\n// document.addEventListener('DOMContentLoaded', () => {\n\n//     const minion_canvas = document.getElementById('minion_canvas');\n//     new MinionRunner(minion_canvas);\n\n// })\n\nconst canvas = document.getElementById(\"minion_canvas\");\nconst ctx = canvas.getContext('2d');\nconst card = document.getElementById(\"card\");\nconst cardScore = document.getElementById(\"card-score\");\n\n//Global variables\n\n//SFX\nlet scoreSFX = new Audio(\"https://archive.org/download/classiccoin/classiccoin.wav\");\nlet gameOverSFX = new Audio(\"https://archive.org/download/smb_gameover/smb_gameover.wav\");\nlet jumpSFX = new Audio(\"https://archive.org/download/jump_20210424/jump.wav\");\n\n//Global Functions\n\nlet player = null;\nlet score = 0;\n//Used to see if user has scored another 10 points or not\nlet scoreIncrement = 0;\nlet arrayBlocks = [];\n//Enemy can speed up when player has scored points at intervals of 10\nlet enemySpeed = 5;\n//So ball doesn't score more then one point at a time\nlet canScore = true;\n//Used for 'setInterval'\nlet presetTime = 1000;\nfunction startGame() {\n  player = new Player(150, 350, 50, \"black\");\n  arrayBlocks = [];\n  score = 0;\n  scoreIncrement = 0;\n  enemySpeed = 5;\n  canScore = true;\n  presetTime = 1000;\n}\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n//Returns true of colliding\nfunction squaresColliding(player, block) {\n  let s1 = Object.assign(Object.create(Object.getPrototypeOf(player)), player);\n  let s2 = Object.assign(Object.create(Object.getPrototypeOf(block)), block);\n  //Don't need pixel perfect collision detection\n  s2.size = s2.size - 10;\n  s2.x = s2.x + 10;\n  s2.y = s2.y + 10;\n  return !(s1.x > s2.x + s2.size ||\n  //R1 is to the right of R2\n  s1.x + s1.size < s2.x ||\n  //R1 to the left of R2\n  s1.y > s2.y + s2.size ||\n  //R1 is below R2\n  s1.y + s1.size < s2.y //R1 is above R2\n  );\n}\n\n//Returns true if past player past block\nfunction isPastBlock(player, block) {\n  return player.x + player.size / 2 > block.x + block.size / 4 && player.x + player.size / 2 < block.x + block.size / 4 * 3;\n}\nclass Player {\n  constructor(x, y, size, color) {\n    this.x = x;\n    this.y = y;\n    this.size = size;\n    this.color = color;\n    this.jumpHeight = 12;\n    //These 3 are used for jump configuration\n    this.shouldJump = false;\n    this.jumpCounter = 0;\n    this.jumpUp = true;\n    //Related to spin animation\n    this.spin = 0;\n    //Get a perfect 90 degree rotation\n    this.spinIncrement = 90 / 32;\n  }\n  draw() {\n    this.jump();\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.size, this.size);\n    //Reset the rotation so the rotation of other elements is not changed\n    if (this.shouldJump) this.counterRotation();\n  }\n  jump() {\n    if (this.shouldJump) {\n      this.jumpCounter++;\n      if (this.jumpCounter < 15) {\n        //Go up\n        this.y -= this.jumpHeight;\n      } else if (this.jumpCounter > 14 && this.jumpCounter < 19) {\n        this.y += 0;\n      } else if (this.jumpCounter < 33) {\n        //Come back down\n        this.y += this.jumpHeight;\n      }\n      this.rotation();\n      //End the cycle\n      if (this.jumpCounter >= 32) {\n        //Reset spin ready for another jump\n        this.counterRotation();\n        this.spin = 0;\n        this.shouldJump = false;\n      }\n    }\n  }\n  rotation() {\n    let offsetXPosition = this.x + this.size / 2;\n    let offsetYPosition = this.y + this.size / 2;\n    ctx.translate(offsetXPosition, offsetYPosition);\n    //Division is there to convert degrees into radians\n    ctx.rotate(this.spin * Math.PI / 180);\n    ctx.rotate(this.spinIncrement * Math.PI / 180);\n    ctx.translate(-offsetXPosition, -offsetYPosition);\n    //4.5 because 90 / 20 (number of iterations in jump) is 4.5\n    this.spin += this.spinIncrement;\n  }\n  counterRotation() {\n    //This rotates the cube back to its origin so that it can be moved upwards properly\n    let offsetXPosition = this.x + this.size / 2;\n    let offsetYPosition = this.y + this.size / 2;\n    ctx.translate(offsetXPosition, offsetYPosition);\n    ctx.rotate(-this.spin * Math.PI / 180);\n    ctx.translate(-offsetXPosition, -offsetYPosition);\n  }\n}\nclass AvoidBlock {\n  constructor(size, speed) {\n    this.x = canvas.width + size;\n    this.y = 400 - size;\n    this.size = size;\n    this.color = \"red\";\n    this.slideSpeed = speed;\n  }\n  draw() {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.x, this.y, this.size, this.size);\n  }\n  slide() {\n    this.draw();\n    this.x -= this.slideSpeed;\n  }\n}\n\n//Auto generate blocks\nfunction generateBlocks() {\n  let timeDelay = randomInterval(presetTime);\n  arrayBlocks.push(new AvoidBlock(50, enemySpeed));\n  setTimeout(generateBlocks, timeDelay);\n}\nfunction randomInterval(timeInterval) {\n  let returnTime = timeInterval;\n  if (Math.random() < 0.5) {\n    returnTime += getRandomNumber(presetTime / 3, presetTime * 1.5);\n  } else {\n    returnTime -= getRandomNumber(presetTime / 5, presetTime / 2);\n  }\n  return returnTime;\n}\nfunction drawBackgroundLine() {\n  ctx.beginPath();\n  ctx.moveTo(0, 400);\n  ctx.lineTo(600, 400);\n  ctx.lineWidth = 1.9;\n  ctx.strokeStyle = \"black\";\n  ctx.stroke();\n}\nfunction drawScore() {\n  ctx.font = \"80px Arial\";\n  ctx.fillStyle = \"black\";\n  let scoreString = score.toString();\n  let xOffset = (scoreString.length - 1) * 20;\n  ctx.fillText(scoreString, 280 - xOffset, 100);\n}\nfunction shouldIncreaseSpeed() {\n  //Check to see if game speed should be increased\n  if (scoreIncrement + 10 === score) {\n    scoreIncrement = score;\n    enemySpeed++;\n    presetTime >= 100 ? presetTime -= 100 : presetTime = presetTime / 2;\n    //Update speed of existing blocks\n    arrayBlocks.forEach(block => {\n      block.slideSpeed = enemySpeed;\n    });\n    console.log(\"Speed increased\");\n  }\n}\nlet animationId = null;\nfunction animate() {\n  animationId = requestAnimationFrame(animate);\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  //Canvas Logic\n  drawBackgroundLine();\n  drawScore();\n  //Foreground\n  player.draw();\n\n  //Check to see if game speed should be increased\n  shouldIncreaseSpeed();\n  arrayBlocks.forEach((arrayBlock, index) => {\n    arrayBlock.slide();\n    //End game as player and enemy have collided\n    if (squaresColliding(player, arrayBlock)) {\n      gameOverSFX.play();\n      cardScore.textContent = score;\n      card.style.display = \"block\";\n      cancelAnimationFrame(animationId);\n    }\n    //User should score a point if this is the case\n    if (isPastBlock(player, arrayBlock) && canScore) {\n      canScore = false;\n      scoreSFX.currentTime = 0;\n      scoreSFX.play();\n      score++;\n    }\n\n    //Delete block that has left the screen\n    if (arrayBlock.x + arrayBlock.size <= 0) {\n      setTimeout(() => {\n        arrayBlocks.splice(index, 1);\n      }, 0);\n    }\n  });\n}\n\n//Call first time on document load\nstartGame();\nanimate();\nsetTimeout(() => {\n  generateBlocks();\n}, randomInterval(presetTime));\n\n//Event Listeners\naddEventListener(\"keydown\", e => {\n  if (e.code === 'Space') {\n    if (!player.shouldJump) {\n      jumpSFX.play();\n      player.jumpCounter = 0;\n      player.shouldJump = true;\n      canScore = true;\n    }\n  }\n});\n\n//Restart game\nfunction restartGame(button) {\n  card.style.display = \"none\";\n  button.blur();\n  startGame();\n  requestAnimationFrame(animate);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9taW5pb25zX3J1bm5lci8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;